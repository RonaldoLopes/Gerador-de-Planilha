// <auto-generated />
using System;
using Gerador.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Gerador.Repository.Migrations
{
    [DbContext(typeof(GeradorContext))]
    [Migration("20200313174554_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Gerador.Domain.Entities.Ambev", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CCP_ICL")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("CodGrupoItemPlani")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("CodItemControle")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("CodItemPlanilha")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("CodPlanControl")
                        .HasColumnType("varchar(5) CHARACTER SET utf8mb4")
                        .HasMaxLength(5);

                    b.Property<string>("ComentarioAmbev")
                        .HasColumnType("varchar(400) CHARACTER SET utf8mb4")
                        .HasMaxLength(400);

                    b.Property<string>("CondBasicaWorkFlo")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("CondEspeciWorkFlo")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.Property<string>("EspecifiHistorico")
                        .HasColumnType("varchar(250) CHARACTER SET utf8mb4")
                        .HasMaxLength(250);

                    b.Property<string>("FrequenciaWorkf")
                        .HasColumnType("varchar(350) CHARACTER SET utf8mb4")
                        .HasMaxLength(350);

                    b.Property<string>("NomGrupoItemPlani")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("NomPlaniControl")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("NomeItemControle")
                        .HasColumnType("varchar(300) CHARACTER SET utf8mb4")
                        .HasMaxLength(300);

                    b.Property<string>("Obrigatorio")
                        .HasColumnType("varchar(4) CHARACTER SET utf8mb4")
                        .HasMaxLength(4);

                    b.Property<string>("PProdMES")
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<string>("RegraColetaAutoma")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.Property<string>("TipoLinha")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("TipoVariavelId")
                        .HasColumnType("int");

                    b.Property<int>("UmId")
                        .HasColumnType("int");

                    b.Property<string>("ValorColetadoWorFlo")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("TipoVariavelId");

                    b.HasIndex("UmId");

                    b.ToTable("Ambevs");
                });

            modelBuilder.Entity("Gerador.Domain.Entities.Configuracao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DescLinha")
                        .IsRequired()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45);

                    b.Property<string>("Linha")
                        .IsRequired()
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("Planta")
                        .IsRequired()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45);

                    b.Property<string>("PlantaReduzida")
                        .IsRequired()
                        .HasColumnType("varchar(4) CHARACTER SET utf8mb4")
                        .HasMaxLength(4);

                    b.Property<string>("Servidor")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Configuracoes");
                });

            modelBuilder.Entity("Gerador.Domain.Entities.Historian", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AbrevMaquina")
                        .IsRequired()
                        .HasColumnType("varchar(5) CHARACTER SET utf8mb4")
                        .HasMaxLength(5);

                    b.Property<int>("AmbevId")
                        .HasColumnType("int");

                    b.Property<int>("CollectDeadPercenRange")
                        .HasColumnType("int");

                    b.Property<int>("CollectionInterval")
                        .HasColumnType("int")
                        .HasMaxLength(11);

                    b.Property<string>("CollectionType")
                        .IsRequired()
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.Property<bool>("CollectorCompression")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("CollectorCompressorTimeOut")
                        .HasColumnType("int");

                    b.Property<string>("CollectorName")
                        .IsRequired()
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.Property<string>("ComentaFinal")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("ComentarioHistoria")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int>("ConfiguracaoId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.Property<string>("Evidencia")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("HiScale")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("Iniciativa")
                        .IsRequired()
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("LInstalacao")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Local23NivelSAP")
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45);

                    b.Property<string>("NivelInstru")
                        .IsRequired()
                        .HasColumnType("varchar(55) CHARACTER SET utf8mb4")
                        .HasMaxLength(55);

                    b.Property<string>("NumMaquina")
                        .IsRequired()
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("PProdMes")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<int>("PlcId")
                        .HasColumnType("int");

                    b.Property<string>("TagHistorian")
                        .HasColumnType("varchar(150) CHARACTER SET utf8mb4")
                        .HasMaxLength(150);

                    b.Property<int>("TipoVariavelId")
                        .HasColumnType("int");

                    b.Property<int>("UmId")
                        .HasColumnType("int");

                    b.Property<string>("ValidTagHistorian")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AmbevId");

                    b.HasIndex("ConfiguracaoId");

                    b.HasIndex("PlcId");

                    b.HasIndex("TipoVariavelId");

                    b.HasIndex("UmId");

                    b.ToTable("Historians");
                });

            modelBuilder.Entity("Gerador.Domain.Entities.IGS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<string>("ClientAccess")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<int>("ConfiguracaoId")
                        .HasColumnType("int");

                    b.Property<string>("FormTag")
                        .IsRequired()
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<int>("PLCId")
                        .HasColumnType("int");

                    b.Property<int>("RespDataType")
                        .HasColumnType("int");

                    b.Property<int>("ScanRate")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<int>("TipoVariavelId")
                        .HasColumnType("int");

                    b.Property<int>("TipoVariavelIdFT")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConfiguracaoId");

                    b.HasIndex("PLCId");

                    b.HasIndex("TipoVariavelId");

                    b.HasIndex("TipoVariavelIdFT");

                    b.ToTable("IgSs");
                });

            modelBuilder.Entity("Gerador.Domain.Entities.Lms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AbrevMaquina")
                        .IsRequired()
                        .HasColumnType("varchar(5) CHARACTER SET utf8mb4")
                        .HasMaxLength(5);

                    b.Property<int>("ConfiguracaoId")
                        .HasColumnType("int");

                    b.Property<string>("NumMaquina")
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.Property<string>("SufixTag")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("TagLMS")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<string>("TagOP")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4")
                        .HasMaxLength(255);

                    b.Property<int>("TipoVariavelId")
                        .HasColumnType("int");

                    b.Property<int>("TipoVariavelIdFT")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConfiguracaoId");

                    b.HasIndex("TipoVariavelId");

                    b.HasIndex("TipoVariavelIdFT");

                    b.ToTable("Lmss");
                });

            modelBuilder.Entity("Gerador.Domain.Entities.Plc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AbrevPLC")
                        .HasColumnType("varchar(5) CHARACTER SET utf8mb4")
                        .HasMaxLength(5);

                    b.Property<string>("CanalIGS")
                        .IsRequired()
                        .HasColumnType("varchar(55) CHARACTER SET utf8mb4")
                        .HasMaxLength(55);

                    b.Property<int>("ConfiguracaoId")
                        .HasColumnType("int");

                    b.Property<string>("DeviceIGS")
                        .IsRequired()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45);

                    b.Property<string>("EnderecoOPCFull")
                        .IsRequired()
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("EnderecoPLC")
                        .HasColumnType("varchar(65) CHARACTER SET utf8mb4")
                        .HasMaxLength(65);

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasColumnType("varchar(15) CHARACTER SET utf8mb4")
                        .HasMaxLength(15);

                    b.Property<string>("Pasta")
                        .IsRequired()
                        .HasColumnType("varchar(5) CHARACTER SET utf8mb4")
                        .HasMaxLength(5);

                    b.Property<string>("PlcDesc")
                        .IsRequired()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45);

                    b.Property<string>("TagIGS")
                        .HasColumnType("varchar(55) CHARACTER SET utf8mb4")
                        .HasMaxLength(55);

                    b.Property<int>("TipoVariavelId")
                        .HasColumnType("int");

                    b.Property<string>("ValidSmartTag")
                        .IsRequired()
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.HasIndex("ConfiguracaoId");

                    b.HasIndex("TipoVariavelId");

                    b.ToTable("Plcs");
                });

            modelBuilder.Entity("Gerador.Domain.Entities.TipoVariavel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.HasKey("Id");

                    b.ToTable("TipoVariaveis");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Boolean"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "SingleInteger"
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Integer"
                        },
                        new
                        {
                            Id = 4,
                            Descricao = "DoubleInteger"
                        },
                        new
                        {
                            Id = 5,
                            Descricao = "DINT"
                        },
                        new
                        {
                            Id = 6,
                            Descricao = "SingleFloat"
                        },
                        new
                        {
                            Id = 7,
                            Descricao = "Float"
                        },
                        new
                        {
                            Id = 8,
                            Descricao = "Double"
                        },
                        new
                        {
                            Id = 9,
                            Descricao = "_A"
                        },
                        new
                        {
                            Id = 10,
                            Descricao = "_L"
                        },
                        new
                        {
                            Id = 11,
                            Descricao = "_AVO"
                        },
                        new
                        {
                            Id = 12,
                            Descricao = "_CIK_C"
                        },
                        new
                        {
                            Id = 13,
                            Descricao = "_CIK"
                        },
                        new
                        {
                            Id = 14,
                            Descricao = "_CIK_L"
                        },
                        new
                        {
                            Id = 15,
                            Descricao = "_CIK_Q"
                        },
                        new
                        {
                            Id = 16,
                            Descricao = "_COD_FORMATO"
                        },
                        new
                        {
                            Id = 17,
                            Descricao = "_KT"
                        },
                        new
                        {
                            Id = 18,
                            Descricao = "_OA"
                        },
                        new
                        {
                            Id = 19,
                            Descricao = "_Q"
                        },
                        new
                        {
                            Id = 20,
                            Descricao = "_S"
                        },
                        new
                        {
                            Id = 21,
                            Descricao = "_SP_T1"
                        },
                        new
                        {
                            Id = 22,
                            Descricao = "_SP_T2"
                        },
                        new
                        {
                            Id = 23,
                            Descricao = "_SP_T3"
                        },
                        new
                        {
                            Id = 24,
                            Descricao = "_SP_T4"
                        },
                        new
                        {
                            Id = 25,
                            Descricao = "_Status"
                        },
                        new
                        {
                            Id = 26,
                            Descricao = "_T"
                        },
                        new
                        {
                            Id = 27,
                            Descricao = "_UP"
                        },
                        new
                        {
                            Id = 28,
                            Descricao = "_ZA_CIK_TAL"
                        },
                        new
                        {
                            Id = 29,
                            Descricao = "_ZP_CIK_TAL"
                        },
                        new
                        {
                            Id = 30,
                            Descricao = "_P"
                        },
                        new
                        {
                            Id = 31,
                            Descricao = "-"
                        },
                        new
                        {
                            Id = 32,
                            Descricao = ""
                        },
                        new
                        {
                            Id = 33,
                            Descricao = "Boolean ou Float"
                        },
                        new
                        {
                            Id = 34,
                            Descricao = "Word"
                        });
                });

            modelBuilder.Entity("Gerador.Domain.Entities.UM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45);

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("UMs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Metro Cúbico",
                            Sigla = "m³"
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Quilograma",
                            Sigla = "kg"
                        },
                        new
                        {
                            Id = 3,
                            Descricao = "Percentual",
                            Sigla = "%"
                        },
                        new
                        {
                            Id = 4,
                            Descricao = "Grau Celsius",
                            Sigla = "ºC"
                        },
                        new
                        {
                            Id = 5,
                            Descricao = "-",
                            Sigla = "uS"
                        },
                        new
                        {
                            Id = 6,
                            Descricao = "Potencial Hidrogeniônico",
                            Sigla = "pH"
                        },
                        new
                        {
                            Id = 7,
                            Descricao = "BAR",
                            Sigla = "bar"
                        },
                        new
                        {
                            Id = 8,
                            Descricao = "-",
                            Sigla = "ºBx"
                        },
                        new
                        {
                            Id = 9,
                            Descricao = "Ampère",
                            Sigla = "A"
                        },
                        new
                        {
                            Id = 10,
                            Descricao = "Centímetro",
                            Sigla = "cm"
                        },
                        new
                        {
                            Id = 11,
                            Descricao = "Centímetro quadrado",
                            Sigla = "cm²"
                        },
                        new
                        {
                            Id = 12,
                            Descricao = "Centímetro cubico",
                            Sigla = "cm³"
                        },
                        new
                        {
                            Id = 13,
                            Descricao = "Fahrenheit",
                            Sigla = "°F"
                        },
                        new
                        {
                            Id = 14,
                            Descricao = "Hectograma",
                            Sigla = "hg"
                        },
                        new
                        {
                            Id = 15,
                            Descricao = "Hectolitro",
                            Sigla = "hL"
                        },
                        new
                        {
                            Id = 16,
                            Descricao = "Joule",
                            Sigla = "J"
                        },
                        new
                        {
                            Id = 17,
                            Descricao = "Quilo-hertz",
                            Sigla = "kHz"
                        },
                        new
                        {
                            Id = 18,
                            Descricao = "Minuto",
                            Sigla = "min"
                        },
                        new
                        {
                            Id = 19,
                            Descricao = "Militro",
                            Sigla = "mL"
                        },
                        new
                        {
                            Id = 20,
                            Descricao = "Milimetro",
                            Sigla = "mm"
                        },
                        new
                        {
                            Id = 21,
                            Descricao = "Milimetro quadrado",
                            Sigla = "mm²"
                        },
                        new
                        {
                            Id = 22,
                            Descricao = "Milimetro Cúbico",
                            Sigla = "mm³"
                        },
                        new
                        {
                            Id = 23,
                            Descricao = "grama",
                            Sigla = "g"
                        },
                        new
                        {
                            Id = 24,
                            Descricao = "Hora",
                            Sigla = "h"
                        },
                        new
                        {
                            Id = 25,
                            Descricao = "Centigrama",
                            Sigla = "cg"
                        },
                        new
                        {
                            Id = 26,
                            Descricao = "Centilitro",
                            Sigla = "cL"
                        },
                        new
                        {
                            Id = 27,
                            Descricao = "Decigrama",
                            Sigla = "dg"
                        },
                        new
                        {
                            Id = 28,
                            Descricao = "Decilitro",
                            Sigla = "dL"
                        },
                        new
                        {
                            Id = 29,
                            Descricao = "Decímetro",
                            Sigla = "dm"
                        },
                        new
                        {
                            Id = 30,
                            Descricao = "Garrafa/Hora",
                            Sigla = "grf/h"
                        },
                        new
                        {
                            Id = 31,
                            Descricao = "Garrafa",
                            Sigla = "grf"
                        },
                        new
                        {
                            Id = 32,
                            Descricao = "1 / 0",
                            Sigla = "1 / 0"
                        },
                        new
                        {
                            Id = 33,
                            Descricao = "seg",
                            Sigla = "seg"
                        },
                        new
                        {
                            Id = 34,
                            Descricao = "lt/h",
                            Sigla = "lt/h"
                        },
                        new
                        {
                            Id = 35,
                            Descricao = "lt",
                            Sigla = "lt"
                        },
                        new
                        {
                            Id = 36,
                            Descricao = "-",
                            Sigla = "-"
                        },
                        new
                        {
                            Id = 37,
                            Descricao = "1 / 0 ou %",
                            Sigla = "1 / 0 ou %"
                        },
                        new
                        {
                            Id = 38,
                            Descricao = "1 / 0 ou kgf/cm2",
                            Sigla = "1 / 0 ou kgf/cm2"
                        },
                        new
                        {
                            Id = 39,
                            Descricao = "kgf/cm2",
                            Sigla = "kgf/cm2"
                        },
                        new
                        {
                            Id = 40,
                            Descricao = "Kilograma Forca por cm2",
                            Sigla = "Kilograma Forca por cm2"
                        },
                        new
                        {
                            Id = 41,
                            Descricao = "Kilowhat Hora",
                            Sigla = "kwh"
                        },
                        new
                        {
                            Id = 42,
                            Descricao = "MICRO SIEMENS/CM",
                            Sigla = "MICRO SIEMENS/CM"
                        },
                        new
                        {
                            Id = 43,
                            Descricao = "Oximetro",
                            Sigla = "Oximetro"
                        },
                        new
                        {
                            Id = 44,
                            Descricao = "Partes por bilhão",
                            Sigla = "PPB"
                        },
                        new
                        {
                            Id = 45,
                            Descricao = "Segundos",
                            Sigla = "s"
                        },
                        new
                        {
                            Id = 46,
                            Descricao = "Unidade de Pasteurização",
                            Sigla = "Unidade de Pasteurização"
                        },
                        new
                        {
                            Id = 47,
                            Descricao = "Lata",
                            Sigla = "Lata"
                        },
                        new
                        {
                            Id = 48,
                            Descricao = "Lata por hora",
                            Sigla = "Lata por hora"
                        },
                        new
                        {
                            Id = 49,
                            Descricao = "OK/NOK",
                            Sigla = "OK/NOK"
                        },
                        new
                        {
                            Id = 50,
                            Descricao = "UP",
                            Sigla = "UP"
                        },
                        new
                        {
                            Id = 51,
                            Descricao = "?",
                            Sigla = "?"
                        });
                });

            modelBuilder.Entity("Gerador.Domain.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Gerador.Domain.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .HasColumnType("varchar(150)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Gerador.Domain.Identity.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Gerador.Domain.Entities.Ambev", b =>
                {
                    b.HasOne("Gerador.Domain.Entities.TipoVariavel", "TipoVariavel")
                        .WithMany("Ambevs")
                        .HasForeignKey("TipoVariavelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gerador.Domain.Entities.UM", "UM")
                        .WithMany("Ambevs")
                        .HasForeignKey("UmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gerador.Domain.Entities.Historian", b =>
                {
                    b.HasOne("Gerador.Domain.Entities.Ambev", "Ambev")
                        .WithMany("Historians")
                        .HasForeignKey("AmbevId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gerador.Domain.Entities.Configuracao", "Configuracao")
                        .WithMany("Historians")
                        .HasForeignKey("ConfiguracaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gerador.Domain.Entities.Plc", "Plc")
                        .WithMany()
                        .HasForeignKey("PlcId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gerador.Domain.Entities.TipoVariavel", "TipoVariavel")
                        .WithMany("Historians")
                        .HasForeignKey("TipoVariavelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gerador.Domain.Entities.UM", "UM")
                        .WithMany("Historians")
                        .HasForeignKey("UmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gerador.Domain.Entities.IGS", b =>
                {
                    b.HasOne("Gerador.Domain.Entities.Configuracao", "Configuracao")
                        .WithMany("IGSs")
                        .HasForeignKey("ConfiguracaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gerador.Domain.Entities.Plc", "Plc")
                        .WithMany("IGSs")
                        .HasForeignKey("PLCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gerador.Domain.Entities.TipoVariavel", "TipoVariavel")
                        .WithMany("IGSs")
                        .HasForeignKey("TipoVariavelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gerador.Domain.Entities.TipoVariavel", "TipoVariavelFT")
                        .WithMany("IGSsFT")
                        .HasForeignKey("TipoVariavelIdFT")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gerador.Domain.Entities.Lms", b =>
                {
                    b.HasOne("Gerador.Domain.Entities.Configuracao", "Configuracao")
                        .WithMany("LMSs")
                        .HasForeignKey("ConfiguracaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gerador.Domain.Entities.TipoVariavel", "TipoVariavel")
                        .WithMany("LMSs")
                        .HasForeignKey("TipoVariavelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gerador.Domain.Entities.TipoVariavel", "TipoVariavelFT")
                        .WithMany("LMSsFT")
                        .HasForeignKey("TipoVariavelIdFT")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gerador.Domain.Entities.Plc", b =>
                {
                    b.HasOne("Gerador.Domain.Entities.Configuracao", "Configuracao")
                        .WithMany("Plcs")
                        .HasForeignKey("ConfiguracaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gerador.Domain.Entities.TipoVariavel", "TipoVariavel")
                        .WithMany("Plcs")
                        .HasForeignKey("TipoVariavelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Gerador.Domain.Identity.UserRole", b =>
                {
                    b.HasOne("Gerador.Domain.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Gerador.Domain.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Gerador.Domain.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Gerador.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Gerador.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Gerador.Domain.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
